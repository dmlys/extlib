<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

    <Type Name="ext::compact_string_base&lt;*&gt;">
        <DisplayString Condition="type == 0">{inpbuf, [inplen]}</DisplayString>
        <DisplayString Condition="type == 1">
          {reinterpret_cast&lt;ext::compact_string_detail::heap_short_body *&gt;(extptr &lt;&lt; 2)->buffer,
           [reinterpret_cast&lt;ext::compact_string_detail::heap_short_body *&gt;(extptr &lt;&lt; 2)->size] }
        </DisplayString>
        <DisplayString Condition="type == 2">
          {reinterpret_cast&lt;ext::compact_string_detail::heap_small_body *&gt;(extptr &lt;&lt; 2)->buffer,
           [reinterpret_cast&lt;ext::compact_string_detail::heap_small_body  *&gt;(extptr &lt;&lt; 2)->size] }
        </DisplayString>
        <DisplayString Condition="type == 3">
          {reinterpret_cast&lt;ext::compact_string_detail::heap_long_body *&gt;(extptr &lt;&lt; 2)->buffer,
           [reinterpret_cast&lt;ext::compact_string_detail::heap_long_body *&gt;(extptr &lt;&lt; 2)->size] }
        </DisplayString>
        
        <StringView Condition="type == 0">inpbuf, [inplen]</StringView>
        <StringView Condition="type == 1">
            reinterpret_cast&lt;ext::compact_string_detail::heap_short_body *&gt;(extptr &lt;&lt; 2)->buffer,
           [reinterpret_cast&lt;ext::compact_string_detail::heap_short_body *&gt;(extptr &lt;&lt; 2)->size]
        </StringView>
        <StringView Condition="type == 2">
            reinterpret_cast&lt;ext::compact_string_detail::heap_small_body *&gt;(extptr &lt;&lt; 2)->buffer,
           [reinterpret_cast&lt;ext::compact_string_detail::heap_small_body *&gt;(extptr &lt;&lt; 2)->size]
        </StringView>
        <StringView Condition="type == 3">
            reinterpret_cast&lt;ext::compact_string_detail::heap_long_body *&gt;(extptr &lt;&lt; 2)->buffer,
           [reinterpret_cast&lt;ext::compact_string_detail::heap_long_body *&gt;(extptr &lt;&lt; 2)->size]
        </StringView>
        
        <Expand>
          <Item Name="type">type</Item>

          <Item Name="size" Condition="type == 0">inplen</Item>
          <Item Name="size" Condition="type == 1">reinterpret_cast&lt;ext::compact_string_detail::heap_short_body *&gt;(extptr &lt;&lt; 2)->size</Item>
          <Item Name="size" Condition="type == 2">reinterpret_cast&lt;ext::compact_string_detail::heap_small_body *&gt;(extptr &lt;&lt; 2)->size</Item>
          <Item Name="size" Condition="type == 3">reinterpret_cast&lt;ext::compact_string_detail::heap_long_body *&gt;(extptr &lt;&lt; 2)->size</Item>

          <Item Name="capacity" Condition="type == 0">inplace_size</Item>
          <Item Name="capacity" Condition="type == 1">reinterpret_cast&lt;ext::compact_string_detail::heap_short_body *&gt;(extptr &lt;&lt; 2)->capacity</Item>
          <Item Name="capacity" Condition="type == 2">reinterpret_cast&lt;ext::compact_string_detail::heap_small_body *&gt;(extptr &lt;&lt; 2)->capacity</Item>
          <Item Name="capacity" Condition="type == 3">reinterpret_cast&lt;ext::compact_string_detail::heap_long_body *&gt;(extptr &lt;&lt; 2)->capacity</Item>
          
          <Item Name="buffer" Condition="type == 0">inpbuf,[inplen]</Item>
          <Item Name="buffer" Condition="type == 1">
            reinterpret_cast&lt;ext::compact_string_detail::heap_short_body *&gt;(extptr &lt;&lt; 2)->buffer,
           [reinterpret_cast&lt;ext::compact_string_detail::heap_short_body *&gt;(extptr &lt;&lt; 2)->size]
          </Item>
          <Item Name="buffer" Condition="type == 2">
            reinterpret_cast&lt;ext::compact_string_detail::heap_small_body *&gt;(extptr &lt;&lt; 2)->buffer,
           [reinterpret_cast&lt;ext::compact_string_detail::heap_small_body *&gt;(extptr &lt;&lt; 2)->size]
          </Item>
          <Item Name="buffer" Condition="type == 3">
            reinterpret_cast&lt;ext::compact_string_detail::heap_long_body *&gt;(extptr &lt;&lt; 2)->buffer,
           [reinterpret_cast&lt;ext::compact_string_detail::heap_long_body *&gt;(extptr &lt;&lt; 2)->size]
          </Item>
        </Expand>
        
    </Type>


  <Type Name="ext::cow_string_body">
    <DisplayString>{m_body.m_ptr->buffer, s}</DisplayString>
    <StringView>m_body.m_ptr->buffer, s</StringView>

    <Expand>
      <Item Name="refs">m_body.m_ptr->refs</Item>
      <Item Name="length">m_body.m_ptr->size</Item>
      <Item Name="capacity">m_body.m_ptr->capacity</Item>
      <Item Name="buffer">m_body.m_ptr->buffer, s</Item>
    </Expand>
  </Type>





  <Type Name = "ext::shared_state_basic">
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::unsatisfied">pending</DisplayString>
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::deffered">deffered</DisplayString>
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) != ext::future_state::unsatisfied &amp;&amp;
                                (m_promise_state._My_val &amp; status_mask) != ext::future_state::deffered">
      has result
    </DisplayString>
    <Expand>
      <Item Name = "[future retrived]">(m_promise_state._My_val &amp; future_retrived) != 0</Item>
      <Item Name = "[future uncancellable]">(m_promise_state._My_val &amp; future_uncancellable) != 0</Item>
      <Item Name = "[refs]">m_refs._My_val</Item>
    </Expand>
  </Type>


  <Type Name = "ext::shared_state&lt;*&gt;">
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::unsatisfied">pending</DisplayString>
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::deffered">deffered</DisplayString>
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) != ext::future_state::unsatisfied &amp;&amp;
                                (m_promise_state._My_val &amp; status_mask) != ext::future_state::deffered">
      has result
    </DisplayString>
    <Expand>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::value">m_val</Item>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::cancellation">"[cancelled]"</Item>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::abandonned">"[broken]"</Item>

      <Item Name = "[exception]" Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::exception">m_exptr</Item>
      <Item Name = "[future retrived]">(m_promise_state._My_val &amp; future_retrived) != 0</Item>
      <Item Name = "[future uncancellable]">(m_promise_state._My_val &amp; future_uncancellable) != 0</Item>
      <Item Name = "[refs]">m_refs._My_val</Item>
    </Expand>
  </Type>

  <Type Name = "ext::shared_state&lt;void&gt;">
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::unsatisfied">pending</DisplayString>
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::deffered">deffered</DisplayString>
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) != ext::future_state::unsatisfied &amp;&amp;
                                (m_promise_state._My_val &amp; status_mask) != ext::future_state::deffered">
      has result
    </DisplayString>
    <Expand>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::value">"&lt;void&gt;"</Item>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::cancellation">"[cancelled]"</Item>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::abandonned">"[broken]"</Item>
      <Item Name = "[exception]" Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::exception">m_exptr</Item>

      <Item Name = "[future retrived]">(m_promise_state._My_val &amp; future_retrived) != 0</Item>
      <Item Name = "[future uncancellable]">(m_promise_state._My_val &amp; future_uncancellable) != 0</Item>
      <Item Name = "[refs]">m_refs._My_val</Item>
    </Expand>
  </Type>


  <Type Name = "ext::shared_state_unexceptional&lt;*&gt;">
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::unsatisfied">pending</DisplayString>
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::deffered">deffered</DisplayString>
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) != ext::future_state::unsatisfied &amp;&amp;
                                (m_promise_state._My_val &amp; status_mask) != ext::future_state::deffered">
      has result
    </DisplayString>
    <Expand>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::value">m_val</Item>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::cancellation">"[cancelled]"</Item>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::abandonned">"[broken]"</Item>

      <Item Name = "[future retrived]">(m_promise_state._My_val &amp; future_retrived) != 0</Item>
      <Item Name = "[future uncancellable]">(m_promise_state._My_val &amp; future_uncancellable) != 0</Item>
      <Item Name = "[refs]">m_refs._My_val</Item>
    </Expand>
  </Type>

  <Type Name = "ext::shared_state_unexceptional&lt;void&gt;">
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::unsatisfied">pending</DisplayString>
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::deffered">deffered</DisplayString>
    <DisplayString Condition = "(m_promise_state._My_val &amp; status_mask) != ext::future_state::unsatisfied &amp;&amp;
                                (m_promise_state._My_val &amp; status_mask) != ext::future_state::deffered">
      has result
    </DisplayString>
    <Expand>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::value">"&lt;void&gt;"</Item>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::cancellation">"[cancelled]"</Item>
      <Item Name = "[value]"     Condition = "(m_promise_state._My_val &amp; status_mask) == ext::future_state::abandonned">"[broken]"</Item>

      <Item Name = "[future retrived]">(m_promise_state._My_val &amp; future_retrived) != 0</Item>
      <Item Name = "[future uncancellable]">(m_promise_state._My_val &amp; future_uncancellable) != 0</Item>
      <Item Name = "[refs]">m_refs._My_val</Item>
    </Expand>
  </Type>


  <Type Name = "ext::promise&lt;*&gt;">
    <DisplayString Condition="m_ptr.m_ptr == nullptr">empty</DisplayString>
    <DisplayString Condition="m_ptr.m_ptr != nullptr">{*m_ptr.m_ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition = "m_ptr.m_ptr != nullptr">m_ptr.m_ptr</ExpandedItem>
    </Expand>
  </Type>

  <Type Name = "ext::packaged_task&lt;*&gt;">
    <DisplayString Condition="m_ptr.m_ptr == nullptr">empty</DisplayString>
    <DisplayString Condition="m_ptr.m_ptr != nullptr">{*m_ptr.m_ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition = "m_ptr.m_ptr != nullptr">m_ptr.m_ptr</ExpandedItem>
    </Expand>
  </Type>


  <Type Name = "ext::future&lt;*&gt;">
    <DisplayString Condition="m_ptr.m_ptr == nullptr">empty</DisplayString>
    <DisplayString Condition="m_ptr.m_ptr != nullptr">{*m_ptr.m_ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition = "m_ptr.m_ptr != nullptr">m_ptr.m_ptr</ExpandedItem>
    </Expand>
  </Type>

  <Type Name = "ext::shared_future&lt;*&gt;">
    <DisplayString Condition="m_ptr.m_ptr == nullptr">empty</DisplayString>
    <DisplayString Condition="m_ptr.m_ptr != nullptr">{*m_ptr.m_ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition = "m_ptr.m_ptr != nullptr">m_ptr.m_ptr</ExpandedItem>
    </Expand>
  </Type>
  
  
</AutoVisualizer>
